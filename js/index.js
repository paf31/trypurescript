// Generated by purs bundle 0.11.6
var PS = {};
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.ready = function(func) {
      return function() {
          jQuery(document).ready(func);
      };
  };

  exports.select = function(selector) {
      return function() {
          return jQuery(selector);
      };
  };

  exports.toggleClass = function(cls) {
      return function(ob) {
          return function() {
              ob.toggleClass(cls);
          };
      };
  };

  exports.on = function(evt) {
      return function(act) {
          return function(ob) {
              return function() {
                  ob.on(evt, function(e) {
                      act(e)(jQuery(this))();
                  });
              };
          };
      };
  };
})(PS["Control.Monad.Eff.JQuery"] = PS["Control.Monad.Eff.JQuery"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.JQuery"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];
  exports["ready"] = $foreign.ready;
  exports["select"] = $foreign.select;
  exports["toggleClass"] = $foreign.toggleClass;
  exports["on"] = $foreign.on;
})(PS["Control.Monad.Eff.JQuery"] = PS["Control.Monad.Eff.JQuery"] || {});
(function(exports) {
    "use strict";

  exports.mkEffFn1 = function mkEffFn1(fn) {
    return function(x) {
      return fn(x)();
    };
  };

  exports.mkEffFn2 = function mkEffFn2(fn) {
    return function(a, b) {
      return fn(a)(b)();
    };
  };

  exports.runEffFn1 = function runEffFn1(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };

  exports.runEffFn2 = function runEffFn2(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };

  exports.runEffFn4 = function runEffFn4(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function() {
              return fn(a, b, c, d);
            };
          };
        };
      };
    };
  };
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Uncurried"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["mkEffFn1"] = $foreign.mkEffFn1;
  exports["mkEffFn2"] = $foreign.mkEffFn2;
  exports["runEffFn1"] = $foreign.runEffFn1;
  exports["runEffFn2"] = $foreign.runEffFn2;
  exports["runEffFn4"] = $foreign.runEffFn4;
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };
  var compare = function (dict) {
      return dict.compare;
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["fold"] = fold;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.defaultBundleAndExecute = function(js, backend) {
    $.get(backend.endpoint + '/bundle').done(function(bundle) {
      exports.execute(js, bundle, backend);
    }).fail(function(err) {
      console.warn("Unable to load JS bundle", err);
    });
  };

  exports.bundleAndExecuteThermite = function(js, backend) {
    $.when(
      $.get("js/console.js"),
      $.get("js/react.min.js"),
      $.get("js/react-dom.min.js"),
      $.get(backend.endpoint + "/bundle")
    ).done(function(consoleScript, react, react_dom, bundle) {

      var replaced = bundle[0].replace(/require\("react"\)/g, 'window.React')
        .replace(/require\("react-dom"\)/g, 'window.ReactDOM')
        .replace(/require\("react-dom\/server"\)/g, 'window.ReactDOM');

      exports.execute(js, [consoleScript[0], react[0], react_dom[0], replaced].join("\n"), backend);
    }).fail(function(err) {

      console.warn("Unable to load JS bundle", err);
    });
  };

  exports.loadOptions = function(pursImports, backend) {

    $('#backend_' + backend.backend).attr('checked', 'checked');

    var view_mode = $.QueryString["view"];
    if (view_mode && (view_mode === "sidebyside" || view_mode === "code" || view_mode === "output")) {
      $('#view_' + view_mode).click();
    }

    var showjs = $.QueryString["js"];
    if (showjs) {
      $('input:checkbox[name=showjs]').prop('checked', showjs === "true");
    }

    var auto_compile = $.QueryString["compile"];
    if (auto_compile) {
      $('input:checkbox[name=auto_compile]').prop('checked', auto_compile === "true");
    }

    var gist = $.QueryString["gist"];
    if (gist) {
      $('#view_gist').attr('href', 'https://gist.github.com/' + gist);
    } else {
      $('#view_gist_li').hide();
    }

    $('input[name=backend_inputs]').change(function(e) {
      var backend = pursImports.getBackend($(this).filter(':checked').val());
      if (confirm("Replace your current code with the " + backend.backend + " backend sample code?")) {
        location.href = "?backend=" + backend.backend;
      } else {
        setTimeout(function() {
          exports.compile(pursImports);
          exports.cacheCurrentCode(backend);
        }, 1000);
      }
      exports.hideMenus();
    });
  };

  exports.setupSession = function(onSessionExists) {
    var guid = function() {
      var s4 = function() {
        return Math.floor((1 + Math.random()) * 0x10000)
          .toString(16)
          .substring(1);
      }
      return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
        s4() + '-' + s4() + s4() + s4();
    }

    var sessionId = $.QueryString['session'];
    if (sessionId) {
      onSessionExists(sessionId);
    } else {
      $.QueryString['session'] = sessionId = guid();
      $.setQueryParameters($.QueryString);
    }
  };

  exports.cacheCurrentCode = function(backend) {
    if (window.localStorage) {
      var sessionId = $.QueryString['session'];
      var code = $('#code_textarea').val();

      localStorage.setItem(sessionId, code);
      localStorage.setItem(sessionId + 'backend', backend.backend);
    }
  };

  exports.tryRestoreCachedCode = function(sessionId) {
    if (window.localStorage) {
      var code = localStorage.getItem(sessionId);
      var backend = localStorage.getItem(sessionId + 'backend');
      if (backend) {
        $('#backend_' + backend).click();
      }
      if (code) {
        $('#code_textarea').val(code);
        return backend;
      }
    }
  };

  var editor, cleanupActions = [];

  exports.setupEditorWith = function(pursImports, name, ta_name, lang) {

    editor = ace.edit(name);

    editor.renderer.setShowGutter(true);
    editor.setFontSize(13);
    editor.setShowPrintMargin(false);

    var session = editor.getSession();

    session.setMode(lang);
    session.setValue($('#' + ta_name).val());
    session.setOptions({
      tabSize: 2,
      useSoftTabs: true
    });

    session.on('change', _.debounce(function() {

      $('#' + ta_name).val(session.getValue());

      var backend = pursImports.getBackend($('input[name=backend_inputs]').filter(':checked').val());
      exports.cacheCurrentCode(backend);
      if ($("#auto_compile").is(":checked")) {
        exports.compile(pursImports);
      }
    }, 750));

    exports.compile(pursImports);
  };

  exports.hideMenus = function() {
    $('#menu').removeClass("show");
    $('#view_mode').removeClass("show-sub-menu");
    $('#backend').removeClass("show-sub-menu");
  };

  exports.changeViewMode = function(jq) {
    var view_mode = $(jq).filter(':checked').val();

    if (view_mode === "code") {
      $('#column1').show();
      $('#column2').hide();
      $('#showjs_label').hide();
      $('#showjs').hide();
    } else if (view_mode === "output") {
      $('#column1').hide();
      $('#column2').show();
      $('#showjs_label').show();
      $('#showjs').show();
    } else { // (view_mode === "sidebyside")
      $('#column1').show();
      $('#column2').show();
      $('#showjs_label').show();
      $('#showjs').show();
    }
  };

  exports.execute = function(js, bundle, backend) {

    var $iframe = $('<iframe id="output-iframe">');

    $('#column2')
      .empty()
      .append($iframe);

    var iframe = $iframe.get(0).contentWindow.document;
    iframe.open();
    iframe.write(
      ['<!DOCTYPE html>'
      , '<html>'
      , '  <head>'
      , '    <meta content="text/html;charset=utf-8" http-equiv="Content-Type">'
      , '    <meta content="utf-8" http-equiv="encoding">'
      , '    <meta name="viewport" content="width=device-width, initial-scale=1.0">'
      , '    <title>Try PureScript!</title>'
      , '    <link rel="stylesheet" href="css/style.css">'
      , backend.extra_styling
      , '  </head>'
      , '  <body>'
      , backend.extra_body
      , '  </body>'
      , '</html>'
      ].join('\n')
    );
    iframe.close();

    // Replace any require() statements with the PS['...'] form using a regex substitution.
    var replaced = js.replace(/require\("[^"]*"\)/g, function(s) {

      return "PS['" + s.substring(12, s.length - 2) + "']";
    });

    // Wrap the compiled code so that main() runs.
    var wrapped =
      [ 'var module = {};'
      , '(function(module) {'
      , replaced
      , '})(module);'
      , 'module.exports.main && module.exports.main();'
      ].join('\n');

    var scripts = [bundle, wrapped].join("\n");

    var script = iframe.createElement('script');
    script.appendChild(iframe.createTextNode(scripts));

    $('iframe').ready(function() {
      var checkExists = setInterval(function() {
        var body = iframe.getElementsByTagName('body')[0];
        if (body) {
          body.onclick = function() {
            exports.hideMenus();
          };
          body.appendChild(script);
          clearInterval(checkExists);
        }
      }, 100);
    });
  };

  exports.compile = function(pursImports) {

    var backend = pursImports.getBackend($('input[name=backend_inputs]').filter(':checked').val());

    $('#column2')
      .empty()
      .append($("<div>").addClass("loading").append("Loading..."));

    var code = $('#code_textarea').val();

    $.ajax({
      url: backend.endpoint + '/compile',
      dataType: 'json',
      data: code,
      method: 'POST',
      contentType: 'text/plain',
      success: function(res) {

        for (var i = 0; i < cleanupActions.length; i++) {
          cleanupActions[i]();
        }

        cleanupActions = [];

        if (res.error) {
          switch (res.error.tag) {
            case "CompilerErrors":
              var errors = res.error.contents;

              $('#column2').empty();

              for (var i = 0; i < errors.length; i++) {
                var error = errors[i];
                $('#column2')
                  .append($('<h1>').addClass('error-banner').append("Error " + (i + 1) + " of " + errors.length))
                  .append($('<pre>').append($('<code>').append(error.message)));

                var startColumn = error.position.startColumn;
                var endColumn = error.position.endColumn;

                if (error.position.startLine === error.position.endLine && endColumn <= error.position.startColumn) {
                  // Make sure the range is at least one character wide.
                  if (startColumn > 0) {
                    startColumn = endColumn - 1;
                  } else {
                    endColumn = startColumn + 1;
                  }
                }

                // Add an error marker
                var range = new(ace.require("ace/range").Range)(
                   error.position.startLine - 1, startColumn - 1, error.position.endLine - 1, endColumn - 1);

                var marker = editor.session.addMarker(range, "error", "text", true);

                editor.session.addGutterDecoration(error.position.startLine - 1, "gutter-error");

                cleanupActions.push((function(marker, line) {
                  return function() {
                    editor.session.removeMarker(marker);
                    editor.session.removeGutterDecoration(line, "gutter-error");
                  };
                })(marker, error.position.startLine - 1));
              }

              break;
            case "OtherError":
              $('#column2')
                .empty()
                .append($('<pre>').append($('<code>').append(res.error.contents)));
              break;
          }
        } else if (res.js) {
          if ($("#showjs").is(":checked")) {
            $('#column2')
              .empty()
              .append($('<pre>').append($('<code>').text(res.js)));
          } else {
            (backend.bundleAndExecute || defaultBundleAndExecute)(res.js, backend);
          }
        }
      },
      error: function(res) {
        $('#column2')
          .empty()
          .append($('<pre>').append($('<code>').append(res.responseText)));
        console.warn("failed to communicate with compilation server", res);
      }
    });
  };

  exports.tryLoadFileFromGist = function(gistInfo, filename) {

    if (gistInfo.files && gistInfo.files.hasOwnProperty(filename)) {

      var url = gistInfo.files[filename].raw_url;

      return $.ajax({
        url: url,
        dataType: 'text'
      });
    } else {

      console.log("File named " + filename + " does not exist in gist");

      var promise = $.Deferred();
      promise.resolve(null);
      return promise;
    }
  };

  exports.loadFromGist = function(pursImports, id, backend) {
    $.ajax({
      url: 'https://api.github.com/gists/' + id,
      dataType: 'json'
    }).done(function(gistInfo) {
      exports.tryLoadFileFromGist(gistInfo, "Main.purs")
        .done(function(code) {
          code && $('#code_textarea').val(code);
          exports.setupEditor(pursImports, backend);
        }).fail(function() {
          console.log("Unable to load gist contents");
          exports.setupEditor(pursImports, backend);
        });
    }).fail(function() {

      console.log("Unable to load gist metadata");
      exports.setupEditor(pursImports, backend);
    });
  };

  exports.publishNewGist = function() {
    if (!confirm('Do you really want to publish this code as an anonymous Gist?\n\nNote: this code will be available to anyone with a link to the Gist.')) {
      return;
    }

    var data = {
      "description": "Published with try.purescript.org",
      "public": false,
      "files": {
        "Main.purs": {
          "content": $('#code_textarea').val()
        }
      }
    };

    $.ajax({
      url: 'https://api.github.com/gists',
      type: 'POST',
      dataType: 'json',
      data: JSON.stringify(data)
    }).success(function(e) {
      console.log(e);
      var sess = $.QueryString.session;
      delete $.QueryString.session;
      $.QueryString.gist = e.id;
      var backend = $('input[name=backend_inputs]').filter(':checked').val();
      $.QueryString.backend = backend;
      $.QueryString.session = sess;
      $.setQueryParameters($.QueryString);
    }).error(function(e) {
      alert("Failed to create gist.");
      console.warn("Gist creation failed: ", e);
    });
  };

  exports.withSession = function(pursImports, sessionId) {
    var cachedBackend = exports.tryRestoreCachedCode(sessionId);
    if (cachedBackend) {
      exports.setupEditor(pursImports, pursImports.getBackend(cachedBackend));
    } else {
      var backend = pursImports.getBackend($.QueryString["backend"] || "core");
      var gist = $.QueryString["gist"] || backend.mainGist;
      exports.loadFromGist(pursImports, gist, backend);
    }
  };
})(PS["Main"] = PS["Main"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Main"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_JQuery = PS["Control.Monad.Eff.JQuery"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var DOM = PS["DOM"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var JS = function (x) {
      return x;
  };
  var BackendConfig = function (x) {
      return x;
  };
  var ExportedFunctions = function (x) {
      return x;
  };
  var Core = (function () {
      function Core() {

      };
      Core.value = new Core();
      return Core;
  })();
  var Thermite = (function () {
      function Thermite() {

      };
      Thermite.value = new Thermite();
      return Thermite;
  })();
  var Slides = (function () {
      function Slides() {

      };
      Slides.value = new Slides();
      return Slides;
  })();
  var Mathbox = (function () {
      function Mathbox() {

      };
      Mathbox.value = new Mathbox();
      return Mathbox;
  })();
  var Behaviors = (function () {
      function Behaviors() {

      };
      Behaviors.value = new Behaviors();
      return Behaviors;
  })();
  var Flare = (function () {
      function Flare() {

      };
      Flare.value = new Flare();
      return Flare;
  })();
  var setupEditor = Control_Monad_Eff_Uncurried.mkEffFn2(function (exports) {
      return function (backend) {
          return function __do() {
              Control_Monad_Eff_Uncurried.runEffFn2($foreign.loadOptions)(exports)(backend)();
              Control_Monad_Eff_Uncurried.runEffFn4($foreign.setupEditorWith)(exports)("code")("code_textarea")("ace/mode/haskell")();
              return Control_Monad_Eff_Uncurried.runEffFn1($foreign.cacheCurrentCode)(backend)();
          };
      };
  });
  var getJS = function (v) {
      return v;
  };
  var getBackend = function (v) {
      if (v instanceof Core) {
          return {
              backend: "core",
              endpoint: "https://compile.purescript.org/try",
              mainGist: "b57a766d417e109785540d584266fc33",
              extra_styling: "",
              extra_body: "",
              bundleAndExecute: $foreign.defaultBundleAndExecute
          };
      };
      if (v instanceof Thermite) {
          return {
              backend: "thermite",
              endpoint: "https://compile.purescript.org/thermite",
              mainGist: "85383bb058471109cfef379bbb6bc11c",
              extra_styling: "<link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\">",
              extra_body: "<div id=\"app\"></div>",
              bundleAndExecute: $foreign.bundleAndExecuteThermite
          };
      };
      if (v instanceof Slides) {
          return {
              backend: "slides",
              endpoint: "https://compile.purescript.org/slides",
              mainGist: "c62b5778a6a5f2bcd32dd97b294c068a",
              extra_styling: "<link rel=\"stylesheet\" href=\"css/slides.css\">",
              extra_body: "<div id=\"main\"></div>",
              bundleAndExecute: $foreign.defaultBundleAndExecute
          };
      };
      if (v instanceof Mathbox) {
          return {
              backend: "mathbox",
              endpoint: "https://compile.purescript.org/purescript-mathbox",
              mainGist: "aeecffd458fa8a365b4af3b3cd9d7759",
              extra_styling: Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)([ "<script src=\"js/mathbox-bundle.js\"></script>", "<link rel=\"stylesheet\" href=\"css/mathbox.css\">" ]),
              extra_body: "",
              bundleAndExecute: $foreign.defaultBundleAndExecute
          };
      };
      if (v instanceof Behaviors) {
          return {
              backend: "behaviors",
              endpoint: "https://compile.purescript.org/behaviors",
              mainGist: "ff1e87f0872d2d891e77d209d8f7706d",
              extra_styling: "",
              extra_body: "<canvas id=\"canvas\" width=\"800\" height=\"600\"></canvas>",
              bundleAndExecute: $foreign.defaultBundleAndExecute
          };
      };
      if (v instanceof Flare) {
          return {
              backend: "flare",
              endpoint: "https://compile.purescript.org/flare",
              mainGist: "4f54d6dd213caa54d736ead597e17fee",
              extra_styling: "<link rel=\"stylesheet\" href=\"css/flare.css\">",
              extra_body: Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)([ "<div id=\"controls\"></div>", "<div id=\"output\"></div>", "<div id=\"tests\"></div>", "<canvas id=\"canvas\" width=\"800\" height=\"600\"></canvas>" ]),
              bundleAndExecute: $foreign.defaultBundleAndExecute
          };
      };
      throw new Error("Failed pattern match at Main line 126, column 1 - line 126, column 39: " + [ v.constructor.name ]);
  };
  var eqBackend = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Core && y instanceof Core) {
              return true;
          };
          if (x instanceof Thermite && y instanceof Thermite) {
              return true;
          };
          if (x instanceof Slides && y instanceof Slides) {
              return true;
          };
          if (x instanceof Mathbox && y instanceof Mathbox) {
              return true;
          };
          if (x instanceof Behaviors && y instanceof Behaviors) {
              return true;
          };
          if (x instanceof Flare && y instanceof Flare) {
              return true;
          };
          return false;
      };
  });
  var ordBackend = new Data_Ord.Ord(function () {
      return eqBackend;
  }, function (x) {
      return function (y) {
          if (x instanceof Core && y instanceof Core) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Core) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Core) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Thermite && y instanceof Thermite) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Thermite) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Thermite) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Slides && y instanceof Slides) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Slides) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Slides) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Mathbox && y instanceof Mathbox) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Mathbox) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Mathbox) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Behaviors && y instanceof Behaviors) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Behaviors) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Behaviors) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Flare && y instanceof Flare) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Main line 124, column 8 - line 124, column 42: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var backendToString = function (v) {
      if (v instanceof Core) {
          return "core";
      };
      if (v instanceof Thermite) {
          return "thermite";
      };
      if (v instanceof Slides) {
          return "slides";
      };
      if (v instanceof Mathbox) {
          return "mathbox";
      };
      if (v instanceof Behaviors) {
          return "behaviors";
      };
      if (v instanceof Flare) {
          return "flare";
      };
      throw new Error("Failed pattern match at Main line 115, column 1 - line 115, column 37: " + [ v.constructor.name ]);
  };
  var backendFromString = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar17) {
                  return $dollar17;
              };
          };
          return __unused(dictPartial)((function () {
              if (v === "core") {
                  return Core.value;
              };
              if (v === "thermite") {
                  return Thermite.value;
              };
              if (v === "slides") {
                  return Slides.value;
              };
              if (v === "mathbox") {
                  return Mathbox.value;
              };
              if (v === "behaviors") {
                  return Behaviors.value;
              };
              if (v === "flare") {
                  return Flare.value;
              };
              throw new Error("Failed pattern match at Main line 107, column 1 - line 107, column 50: " + [ v.constructor.name ]);
          })());
      };
  };
  var getBackendFromString = function (s) {
      return getBackend(backendFromString()(s));
  };
  var exportedFunctions = {
      getBackend: getBackendFromString,
      setupEditor: setupEditor
  };
  var init = function __do() {
      Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.select("#showjs"))(Control_Monad_Eff_JQuery.on("change")(function (e) {
          return function (v) {
              return Control_Monad_Eff_Uncurried.runEffFn1($foreign.compile)(exportedFunctions);
          };
      }))();
      Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.select("#compile_label"))(Control_Monad_Eff_JQuery.on("click")(function (e) {
          return function (v) {
              return Control_Monad_Eff_Uncurried.runEffFn1($foreign.compile)(exportedFunctions);
          };
      }))();
      Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.select("input[name=view_mode]"))(Control_Monad_Eff_JQuery.on("change")(function (v) {
          return function (jq) {
              return Control_Monad_Eff_Uncurried.runEffFn1($foreign.changeViewMode)(jq);
          };
      }))();
      Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.select("#gist_save"))(Control_Monad_Eff_JQuery.on("click")(function (e) {
          return function (v) {
              return $foreign.publishNewGist;
          };
      }))();
      Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.select("#hamburger"))(Control_Monad_Eff_JQuery.on("click")(function (e) {
          return function (v) {
              return Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.select("#menu"))(Control_Monad_Eff_JQuery.toggleClass("show"));
          };
      }))();
      Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.select("#view_mode_label"))(Control_Monad_Eff_JQuery.on("click")(function (e) {
          return function (v) {
              return Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.select("#view_mode"))(Control_Monad_Eff_JQuery.toggleClass("show-sub-menu"));
          };
      }))();
      Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.select("#backend_label"))(Control_Monad_Eff_JQuery.on("click")(function (e) {
          return function (v) {
              return Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.select("#backend"))(Control_Monad_Eff_JQuery.toggleClass("show-sub-menu"));
          };
      }))();
      Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Monad_Eff_JQuery.select("#editor_view"))(Control_Monad_Eff_JQuery.on("click")(function (e) {
          return function (v) {
              return $foreign.hideMenus;
          };
      }))();
      return Control_Monad_Eff_Uncurried.runEffFn1($foreign.setupSession)(Control_Monad_Eff_Uncurried.mkEffFn1(function (x) {
          return Control_Monad_Eff_Uncurried.runEffFn2($foreign.withSession)(exportedFunctions)(x);
      }))();
  };
  var main = Control_Monad_Eff_JQuery.ready(init);
  exports["ExportedFunctions"] = ExportedFunctions;
  exports["exportedFunctions"] = exportedFunctions;
  exports["init"] = init;
  exports["setupEditor"] = setupEditor;
  exports["JS"] = JS;
  exports["getJS"] = getJS;
  exports["BackendConfig"] = BackendConfig;
  exports["Core"] = Core;
  exports["Thermite"] = Thermite;
  exports["Slides"] = Slides;
  exports["Mathbox"] = Mathbox;
  exports["Behaviors"] = Behaviors;
  exports["Flare"] = Flare;
  exports["backendFromString"] = backendFromString;
  exports["backendToString"] = backendToString;
  exports["getBackend"] = getBackend;
  exports["getBackendFromString"] = getBackendFromString;
  exports["main"] = main;
  exports["eqBackend"] = eqBackend;
  exports["ordBackend"] = ordBackend;
  exports["changeViewMode"] = $foreign.changeViewMode;
  exports["defaultBundleAndExecute"] = $foreign.defaultBundleAndExecute;
  exports["bundleAndExecuteThermite"] = $foreign.bundleAndExecuteThermite;
  exports["cacheCurrentCode"] = $foreign.cacheCurrentCode;
  exports["compile"] = $foreign.compile;
  exports["execute"] = $foreign.execute;
  exports["hideMenus"] = $foreign.hideMenus;
  exports["loadFromGist"] = $foreign.loadFromGist;
  exports["loadOptions"] = $foreign.loadOptions;
  exports["publishNewGist"] = $foreign.publishNewGist;
  exports["setupEditorWith"] = $foreign.setupEditorWith;
  exports["setupSession"] = $foreign.setupSession;
  exports["tryLoadFileFromGist"] = $foreign.tryLoadFileFromGist;
  exports["tryRestoreCachedCode"] = $foreign.tryRestoreCachedCode;
  exports["withSession"] = $foreign.withSession;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
